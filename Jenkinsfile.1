// Actions with Production AWS Infrastructure (validate/plan/apply/destroy)

pipeline {
	agent {label 'Ansible'}
	parameters {
		choice choices: ['validate', 'plan', 'build', 'destroy'], name: "CHOICE"
  	}
	environment {
    		ANSIBLE_PK = credentials('AWS-ProdServer-private-key')
			URL_WEBHOOK = 'https://xclouduae.webhook.office.com/webhookb2/bf73b366-7e43-452c-beee-46ccad2ec03b@1fbd1973-996d-42dd-a3a4-0c8cd76c556e/IncomingWebhook/793d2062b4bc47108d0adaae55b94266/91a922c9-a9d8-43e7-9520-4880a959490b'
	}

	options {
        office365ConnectorWebhooks([
            [name: "Office 365", url: env.URL_WEBHOOK,
//			"https://xclouduae.webhook.office.com/webhookb2/bf73b366-7e43-452c-beee-46ccad2ec03b@1fbd1973-996d-42dd-a3a4-0c8cd76c556e/IncomingWebhook/793d2062b4bc47108d0adaae55b94266/91a922c9-a9d8-43e7-9520-4880a959490b", 
			notifyBackToNormal: true, notifyFailure: true, 
			notifyRepeatedFailure: true, notifySuccess: true, notifyAborted: true]
			])
    }

  	stages {
// 		Terraform apply
		stage('AWS Env Provisioning by Terraform') {
			when {
       	    	expression { 
       		 		return params.CHOICE == 'build'
				}
        	}	

    		steps {
        		withCredentials([[
         		$class:            'AmazonWebServicesCredentialsBinding', 
	     		credentialsId:     'AWS_Terraform', 
    	  		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
      			secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
	        		sh '''
					cd TF
	            	terraform init -no-color
           			terraform apply --auto-approve -no-color
					'''
/*
					sleep 60
					LB=$(cat lb.txt)
					curl -i $LB | grep 'HTTP' | awk '{print $2}'
					rm lb.txt
*/
					script {
						def LB = readFile(file: 'TF/lb.txt')
          				def response = httpRequest url: "http://${LB}",  validResponseCodes: '200:599'
          				while (response.status != 200) {
            				sleep 10 // wait for 10 seconds before trying again
            				response = httpRequest url: "http://${LB}",  validResponseCodes: '200:599'
						office365ConnectorSend webhookUrl: env.URL_WEBHOOK, message: "http://${LB}"
          				}
        			}
						
				}
     		}
		}
//		Terraform destroy		
		stage('AWS Env destroy by Terraform') {
			when {
               	expression { 
           			return params.CHOICE == 'destroy'
               	}
			}
      		steps {
        		withCredentials([[
          		$class:            'AmazonWebServicesCredentialsBinding', 
          		credentialsId:     'AWS_Terraform', 
          		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
          		secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            		sh '''
					cd TF
            		terraform init -no-color
            		terraform ${CHOICE} --auto-approve -no-color
            		'''          
        		}
			}
		}
//		Terraform other actions
	stage('AWS Env Test by Terraform') {
			
			when {
               	expression { 
           			return params.CHOICE == 'validate' || params.CHOICE == 'plan'
               	}
			}
      		steps {
        		withCredentials([[
          		$class:            'AmazonWebServicesCredentialsBinding', 
          		credentialsId:     'AWS_Terraform', 
          		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
          		secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            		sh '''
					cd TF
            		terraform init -no-color
            		terraform ${CHOICE} -no-color
            		'''          
        		}
			}
		}	
	}
}		
