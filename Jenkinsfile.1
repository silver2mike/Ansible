// Actions with Production AWS Infrastructure (validate/plan/apply/destroy)

pipeline {
	agent {label 'Ansible'}
	parameters {
		choice choices: ['validate', 'plan', 'build', 'destroy'], name: "CHOICE"
  	}
	environment {
    		ANSIBLE_PK = credentials('AWS-ProdServer-private-key')
	}
  	stages {
// 		Terraform apply
		stage('AWS Env Provisioning by Terraform') {
			when {
       	    	expression { 
       		 		return params.CHOICE == 'build'
				}
        	}	

    		steps {
        		withCredentials([[
         		$class:            'AmazonWebServicesCredentialsBinding', 
	     		credentialsId:     'AWS_Terraform', 
    	  		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
      			secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
	        		sh '''
					cd TF
	            	terraform init -no-color
           			terraform apply --auto-approve -no-color
					'''

/*
					sleep 60
					LB=$(cat lb.txt)
					curl -i $LB | grep 'HTTP' | awk '{print $2}'
					rm lb.txt
*/
					script {
						def LB = readFile(text: 'TF/lb.txt').trim()
          				def response = httpRequest "${LB}"
          				while (response.status != 200) {
            				sleep 10 // wait for 10 seconds before trying again
            				response = httpRequest "${LB}"
          				}
        			}	
				}
     		}
		}
//		Terraform destroy		
		stage('AWS Env destroy by Terraform') {
			when {
               	expression { 
           			return params.CHOICE == 'destroy'
               	}
			}
      		steps {
        		withCredentials([[
          		$class:            'AmazonWebServicesCredentialsBinding', 
          		credentialsId:     'AWS_Terraform', 
          		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
          		secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            		sh '''
					cd TF
            		terraform init -no-color
            		terraform ${CHOICE} --auto-approve -no-color
            		'''          
        		}
			}
		}
//		Terraform other actions
	stage('AWS Env Test by Terraform') {
			
			when {
               	expression { 
           			return params.CHOICE == 'validate' || params.CHOICE == 'plan'
               	}
			}
      		steps {
        		withCredentials([[
          		$class:            'AmazonWebServicesCredentialsBinding', 
          		credentialsId:     'AWS_Terraform', 
          		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
          		secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            		sh '''
					cd TF
            		terraform init -no-color
            		terraform ${CHOICE} -no-color
            		'''          
        		}
			}
		}	
	}
}		
