// Actions with Production AWS Infrastructure (validate/plan/apply/destroy)

pipeline {
	agent {label 'Ansible'}
	parameters {
		choice choices: ['validate', 'plan', 'build', 'destroy'], name: "CHOICE"
  	}
	environment {
    		ANSIBLE_PK = credentials('AWS-ProdServer-private-key')
	}
  	stages {
// 		Terraform apply
		stage('AWS Env Provisioning by Terraform') {
			when {
       	    	expression { 
       		 		return params.CHOICE == 'build'
				}
        	}	

    		steps {
        		withCredentials([[
         		$class:            'AmazonWebServicesCredentialsBinding', 
	     		credentialsId:     'AWS_Terraform', 
    	  		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
      			secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
	        		sh '''
	            		terraform init -no-color
           			terraform apply --auto-approve -no-color
				LB=$TF_VAR
				echo "123 $LB"
				'''
				
	       		}
     		}
		}
//		Terraform destroy		
		stage('AWS Env destroy by Terraform') {
			when {
               	expression { 
           			return params.CHOICE == 'destroy'
               	}
			}
      		steps {
        		withCredentials([[
          		$class:            'AmazonWebServicesCredentialsBinding', 
          		credentialsId:     'AWS_Terraform', 
          		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
          		secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            		sh '''
            		terraform init -no-color
            		terraform ${CHOICE} --auto-approve -no-color
            		'''          
        		}
			}
		}
//		Terraform other actions
	stage('AWS Env Test by Terraform') {
			
			when {
               	expression { 
           			return params.CHOICE == 'validate' || params.CHOICE == 'plan'
               	}
			}
      		steps {
        		withCredentials([[
          		$class:            'AmazonWebServicesCredentialsBinding', 
          		credentialsId:     'AWS_Terraform', 
          		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
          		secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            		sh '''
            		terraform init -no-color
            		terraform ${CHOICE} -no-color
            		'''          
        		}
			}
		}	
	}
}		
