// Actions with Production AWS Infrastructure (validate/plan/apply/destroy) 
// ANOTHER AWS ACCOUNT

pipeline {
	agent {label 'Ansible'}
	parameters {
		choice choices: ['validate', 'plan', 'build', 'destroy'], name: "CHOICE"
  	}
/*
	options {
        office365ConnectorWebhooks([
            [name: "Office 365", 
			url: "", 
			notifyBackToNormal: true, notifyFailure: true, 
			notifyRepeatedFailure: true, notifySuccess: true, notifyAborted: true]
			])
    }
*/
  	stages {
// 		Terraform apply
		stage('AWS Env Provisioning by Terraform') {
			when {
       	    	expression { 
       		 		return params.CHOICE == 'build'
				}
        	}	

    		steps {
        		withCredentials([[
         		$class:            'AmazonWebServicesCredentialsBinding', 
	     		credentialsId:     'AWS_Terraform_new', 
    	  		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
      			secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
	        		sh '''
					cd TFN
	            	terraform init -no-color
           			terraform apply --auto-approve -no-color
					'''
				}
     		}
		}
		stage('Test Prod availability') {
			when {
       	    	expression { 
       		 		return params.CHOICE == 'build'
				}
        	}
			steps {
				script {
					def LB = readFile(file: 'TFN/lb.txt')
          			def response = httpRequest url: "http://${LB}",  validResponseCodes: '200:599'

					for (int count =1; count <= 10; count++) {
						if (response.status == 200) {
							slackSend color: "good", message: "The PROD ENV available on http://${LB}"
							return 0
						} else if (count == 10 && response.status != 200) {
							slackSend color: "danger", message: "The PROD ENV UNAVAILABLE"
							error("The PROD ENV UNAVAILABLE")
						} else {
							sleep 20
						}
					}
//          				while (response.status != 200 || count < 10) {
//            				sleep 10 // wait for 10 seconds before trying again
//            				response = httpRequest url: "http://${LB}",  validResponseCodes: '200:599'
//							count++;
   				}
			}
		}

//		Terraform destroy		
		stage('AWS Env destroy by Terraform') {
			when {
               	expression { 
           			return params.CHOICE == 'destroy'
               	}
			}
      		steps {
        		withCredentials([[
          		$class:            'AmazonWebServicesCredentialsBinding', 
          		credentialsId:     'AWS_Terraform_new', 
          		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
          		secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            		sh '''
					cd TFN
            		terraform init -no-color
            		terraform ${CHOICE} --auto-approve -no-color
            		'''          
        		}
				slackSend color: "good", message: "The Prod Env Successfully destroyed"
			}
		}
//		Terraform other actions
	stage('AWS Env Test by Terraform') {
			
			when {
               	expression { 
           			return params.CHOICE == 'validate' || params.CHOICE == 'plan'
               	}
			}
      		steps {
        		withCredentials([[
          		$class:            'AmazonWebServicesCredentialsBinding', 
          		credentialsId:     'AWS_Terraform_new', 
          		accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
          		secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            		sh '''
					cd TFN
            		terraform init -no-color
            		terraform ${CHOICE} -no-color
            		'''          
        		}
			}
		}	
	}
}		
